// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `nodeapi.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:nodeapi.NodeInfo)
pub struct NodeInfo {
    // message fields
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.node_name)
    pub node_name: ::std::string::String,
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.node_type)
    pub node_type: ::protobuf::EnumOrUnknown<NodeType>,
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.server_info)
    pub server_info: ::std::string::String,
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.node_pbase_version)
    pub node_pbase_version: ::std::string::String,
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.with_node_id)
    pub with_node_id: i32,
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.cluster_id)
    pub cluster_id: i32,
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.area_id)
    pub area_id: ::std::string::String,
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.channelTypes)
    pub channelTypes: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.gw_info)
    pub gw_info: ::std::string::String,
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.bin_version)
    pub bin_version: ::std::string::String,
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.count)
    pub count: i32,
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.last_alive_time)
    pub last_alive_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:nodeapi.NodeInfo.keepalive_arg)
    pub keepalive_arg: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:nodeapi.NodeInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NodeInfo {
    fn default() -> &'a NodeInfo {
        <NodeInfo as ::protobuf::Message>::default_instance()
    }
}

impl NodeInfo {
    pub fn new() -> NodeInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_name",
            |m: &NodeInfo| { &m.node_name },
            |m: &mut NodeInfo| { &mut m.node_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_type",
            |m: &NodeInfo| { &m.node_type },
            |m: &mut NodeInfo| { &mut m.node_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "server_info",
            |m: &NodeInfo| { &m.server_info },
            |m: &mut NodeInfo| { &mut m.server_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_pbase_version",
            |m: &NodeInfo| { &m.node_pbase_version },
            |m: &mut NodeInfo| { &mut m.node_pbase_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "with_node_id",
            |m: &NodeInfo| { &m.with_node_id },
            |m: &mut NodeInfo| { &mut m.with_node_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cluster_id",
            |m: &NodeInfo| { &m.cluster_id },
            |m: &mut NodeInfo| { &mut m.cluster_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "area_id",
            |m: &NodeInfo| { &m.area_id },
            |m: &mut NodeInfo| { &mut m.area_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "channelTypes",
            |m: &NodeInfo| { &m.channelTypes },
            |m: &mut NodeInfo| { &mut m.channelTypes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gw_info",
            |m: &NodeInfo| { &m.gw_info },
            |m: &mut NodeInfo| { &mut m.gw_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bin_version",
            |m: &NodeInfo| { &m.bin_version },
            |m: &mut NodeInfo| { &mut m.bin_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &NodeInfo| { &m.count },
            |m: &mut NodeInfo| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "last_alive_time",
            |m: &NodeInfo| { &m.last_alive_time },
            |m: &mut NodeInfo| { &mut m.last_alive_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "keepalive_arg",
            |m: &NodeInfo| { &m.keepalive_arg },
            |m: &mut NodeInfo| { &mut m.keepalive_arg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NodeInfo>(
            "NodeInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NodeInfo {
    const NAME: &'static str = "NodeInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.node_name = is.read_string()?;
                },
                16 => {
                    self.node_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.server_info = is.read_string()?;
                },
                34 => {
                    self.node_pbase_version = is.read_string()?;
                },
                40 => {
                    self.with_node_id = is.read_int32()?;
                },
                48 => {
                    self.cluster_id = is.read_int32()?;
                },
                58 => {
                    self.area_id = is.read_string()?;
                },
                66 => {
                    is.read_repeated_packed_uint32_into(&mut self.channelTypes)?;
                },
                64 => {
                    self.channelTypes.push(is.read_uint32()?);
                },
                74 => {
                    self.gw_info = is.read_string()?;
                },
                82 => {
                    self.bin_version = is.read_string()?;
                },
                88 => {
                    self.count = is.read_int32()?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.last_alive_time)?;
                },
                106 => {
                    self.keepalive_arg = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.node_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node_name);
        }
        if self.node_type != ::protobuf::EnumOrUnknown::new(NodeType::PROVIDER) {
            my_size += ::protobuf::rt::int32_size(2, self.node_type.value());
        }
        if !self.server_info.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.server_info);
        }
        if !self.node_pbase_version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.node_pbase_version);
        }
        if self.with_node_id != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.with_node_id);
        }
        if self.cluster_id != 0 {
            my_size += ::protobuf::rt::int32_size(6, self.cluster_id);
        }
        if !self.area_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.area_id);
        }
        for value in &self.channelTypes {
            my_size += ::protobuf::rt::uint32_size(8, *value);
        };
        if !self.gw_info.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.gw_info);
        }
        if !self.bin_version.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.bin_version);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::int32_size(11, self.count);
        }
        if let Some(v) = self.last_alive_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.keepalive_arg.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.keepalive_arg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.node_name.is_empty() {
            os.write_string(1, &self.node_name)?;
        }
        if self.node_type != ::protobuf::EnumOrUnknown::new(NodeType::PROVIDER) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.node_type))?;
        }
        if !self.server_info.is_empty() {
            os.write_string(3, &self.server_info)?;
        }
        if !self.node_pbase_version.is_empty() {
            os.write_string(4, &self.node_pbase_version)?;
        }
        if self.with_node_id != 0 {
            os.write_int32(5, self.with_node_id)?;
        }
        if self.cluster_id != 0 {
            os.write_int32(6, self.cluster_id)?;
        }
        if !self.area_id.is_empty() {
            os.write_string(7, &self.area_id)?;
        }
        for v in &self.channelTypes {
            os.write_uint32(8, *v)?;
        };
        if !self.gw_info.is_empty() {
            os.write_string(9, &self.gw_info)?;
        }
        if !self.bin_version.is_empty() {
            os.write_string(10, &self.bin_version)?;
        }
        if self.count != 0 {
            os.write_int32(11, self.count)?;
        }
        if let Some(v) = self.last_alive_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if !self.keepalive_arg.is_empty() {
            os.write_string(13, &self.keepalive_arg)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NodeInfo {
        NodeInfo::new()
    }

    fn clear(&mut self) {
        self.node_name.clear();
        self.node_type = ::protobuf::EnumOrUnknown::new(NodeType::PROVIDER);
        self.server_info.clear();
        self.node_pbase_version.clear();
        self.with_node_id = 0;
        self.cluster_id = 0;
        self.area_id.clear();
        self.channelTypes.clear();
        self.gw_info.clear();
        self.bin_version.clear();
        self.count = 0;
        self.last_alive_time.clear();
        self.keepalive_arg.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NodeInfo {
        static instance: NodeInfo = NodeInfo {
            node_name: ::std::string::String::new(),
            node_type: ::protobuf::EnumOrUnknown::from_i32(0),
            server_info: ::std::string::String::new(),
            node_pbase_version: ::std::string::String::new(),
            with_node_id: 0,
            cluster_id: 0,
            area_id: ::std::string::String::new(),
            channelTypes: ::std::vec::Vec::new(),
            gw_info: ::std::string::String::new(),
            bin_version: ::std::string::String::new(),
            count: 0,
            last_alive_time: ::protobuf::MessageField::none(),
            keepalive_arg: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NodeInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NodeInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NodeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:nodeapi.NodeID)
pub struct NodeID {
    // message fields
    // @@protoc_insertion_point(field:nodeapi.NodeID.node_id)
    pub node_id: i32,
    // @@protoc_insertion_point(field:nodeapi.NodeID.secret)
    pub secret: u64,
    // @@protoc_insertion_point(field:nodeapi.NodeID.server_info)
    pub server_info: ::std::string::String,
    // @@protoc_insertion_point(field:nodeapi.NodeID.keepalive_duration)
    pub keepalive_duration: i32,
    // special fields
    // @@protoc_insertion_point(special_field:nodeapi.NodeID.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NodeID {
    fn default() -> &'a NodeID {
        <NodeID as ::protobuf::Message>::default_instance()
    }
}

impl NodeID {
    pub fn new() -> NodeID {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_id",
            |m: &NodeID| { &m.node_id },
            |m: &mut NodeID| { &mut m.node_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secret",
            |m: &NodeID| { &m.secret },
            |m: &mut NodeID| { &mut m.secret },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "server_info",
            |m: &NodeID| { &m.server_info },
            |m: &mut NodeID| { &mut m.server_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "keepalive_duration",
            |m: &NodeID| { &m.keepalive_duration },
            |m: &mut NodeID| { &mut m.keepalive_duration },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NodeID>(
            "NodeID",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NodeID {
    const NAME: &'static str = "NodeID";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.node_id = is.read_int32()?;
                },
                17 => {
                    self.secret = is.read_fixed64()?;
                },
                26 => {
                    self.server_info = is.read_string()?;
                },
                32 => {
                    self.keepalive_duration = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.node_id != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.node_id);
        }
        if self.secret != 0 {
            my_size += 1 + 8;
        }
        if !self.server_info.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.server_info);
        }
        if self.keepalive_duration != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.keepalive_duration);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.node_id != 0 {
            os.write_int32(1, self.node_id)?;
        }
        if self.secret != 0 {
            os.write_fixed64(2, self.secret)?;
        }
        if !self.server_info.is_empty() {
            os.write_string(3, &self.server_info)?;
        }
        if self.keepalive_duration != 0 {
            os.write_int32(4, self.keepalive_duration)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NodeID {
        NodeID::new()
    }

    fn clear(&mut self) {
        self.node_id = 0;
        self.secret = 0;
        self.server_info.clear();
        self.keepalive_duration = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NodeID {
        static instance: NodeID = NodeID {
            node_id: 0,
            secret: 0,
            server_info: ::std::string::String::new(),
            keepalive_duration: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NodeID {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NodeID").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NodeID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeID {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:nodeapi.ServerStatus)
pub struct ServerStatus {
    // message fields
    // @@protoc_insertion_point(field:nodeapi.ServerStatus.cpu)
    pub cpu: f64,
    // @@protoc_insertion_point(field:nodeapi.ServerStatus.memory)
    pub memory: f64,
    // @@protoc_insertion_point(field:nodeapi.ServerStatus.msg_count)
    pub msg_count: u64,
    // special fields
    // @@protoc_insertion_point(special_field:nodeapi.ServerStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServerStatus {
    fn default() -> &'a ServerStatus {
        <ServerStatus as ::protobuf::Message>::default_instance()
    }
}

impl ServerStatus {
    pub fn new() -> ServerStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cpu",
            |m: &ServerStatus| { &m.cpu },
            |m: &mut ServerStatus| { &mut m.cpu },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memory",
            |m: &ServerStatus| { &m.memory },
            |m: &mut ServerStatus| { &mut m.memory },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg_count",
            |m: &ServerStatus| { &m.msg_count },
            |m: &mut ServerStatus| { &mut m.msg_count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerStatus>(
            "ServerStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServerStatus {
    const NAME: &'static str = "ServerStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.cpu = is.read_double()?;
                },
                17 => {
                    self.memory = is.read_double()?;
                },
                24 => {
                    self.msg_count = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.cpu != 0. {
            my_size += 1 + 8;
        }
        if self.memory != 0. {
            my_size += 1 + 8;
        }
        if self.msg_count != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.msg_count);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.cpu != 0. {
            os.write_double(1, self.cpu)?;
        }
        if self.memory != 0. {
            os.write_double(2, self.memory)?;
        }
        if self.msg_count != 0 {
            os.write_uint64(3, self.msg_count)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServerStatus {
        ServerStatus::new()
    }

    fn clear(&mut self) {
        self.cpu = 0.;
        self.memory = 0.;
        self.msg_count = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServerStatus {
        static instance: ServerStatus = ServerStatus {
            cpu: 0.,
            memory: 0.,
            msg_count: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServerStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServerStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServerStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:nodeapi.NodeUpdate)
pub struct NodeUpdate {
    // message fields
    // @@protoc_insertion_point(field:nodeapi.NodeUpdate.node_id)
    pub node_id: i32,
    // @@protoc_insertion_point(field:nodeapi.NodeUpdate.secret)
    pub secret: u64,
    // @@protoc_insertion_point(field:nodeapi.NodeUpdate.update_count)
    pub update_count: i32,
    // @@protoc_insertion_point(field:nodeapi.NodeUpdate.node_status)
    pub node_status: i32,
    // @@protoc_insertion_point(field:nodeapi.NodeUpdate.node_arg)
    pub node_arg: ::std::string::String,
    // @@protoc_insertion_point(field:nodeapi.NodeUpdate.status)
    pub status: ::protobuf::MessageField<ServerStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:nodeapi.NodeUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NodeUpdate {
    fn default() -> &'a NodeUpdate {
        <NodeUpdate as ::protobuf::Message>::default_instance()
    }
}

impl NodeUpdate {
    pub fn new() -> NodeUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_id",
            |m: &NodeUpdate| { &m.node_id },
            |m: &mut NodeUpdate| { &mut m.node_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secret",
            |m: &NodeUpdate| { &m.secret },
            |m: &mut NodeUpdate| { &mut m.secret },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "update_count",
            |m: &NodeUpdate| { &m.update_count },
            |m: &mut NodeUpdate| { &mut m.update_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_status",
            |m: &NodeUpdate| { &m.node_status },
            |m: &mut NodeUpdate| { &mut m.node_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_arg",
            |m: &NodeUpdate| { &m.node_arg },
            |m: &mut NodeUpdate| { &mut m.node_arg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ServerStatus>(
            "status",
            |m: &NodeUpdate| { &m.status },
            |m: &mut NodeUpdate| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NodeUpdate>(
            "NodeUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NodeUpdate {
    const NAME: &'static str = "NodeUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.node_id = is.read_int32()?;
                },
                17 => {
                    self.secret = is.read_fixed64()?;
                },
                24 => {
                    self.update_count = is.read_int32()?;
                },
                32 => {
                    self.node_status = is.read_int32()?;
                },
                42 => {
                    self.node_arg = is.read_string()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.node_id != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.node_id);
        }
        if self.secret != 0 {
            my_size += 1 + 8;
        }
        if self.update_count != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.update_count);
        }
        if self.node_status != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.node_status);
        }
        if !self.node_arg.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.node_arg);
        }
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.node_id != 0 {
            os.write_int32(1, self.node_id)?;
        }
        if self.secret != 0 {
            os.write_fixed64(2, self.secret)?;
        }
        if self.update_count != 0 {
            os.write_int32(3, self.update_count)?;
        }
        if self.node_status != 0 {
            os.write_int32(4, self.node_status)?;
        }
        if !self.node_arg.is_empty() {
            os.write_string(5, &self.node_arg)?;
        }
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NodeUpdate {
        NodeUpdate::new()
    }

    fn clear(&mut self) {
        self.node_id = 0;
        self.secret = 0;
        self.update_count = 0;
        self.node_status = 0;
        self.node_arg.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NodeUpdate {
        static instance: NodeUpdate = NodeUpdate {
            node_id: 0,
            secret: 0,
            update_count: 0,
            node_status: 0,
            node_arg: ::std::string::String::new(),
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NodeUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NodeUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NodeUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:nodeapi.Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:nodeapi.Response.ok)
    pub ok: bool,
    // @@protoc_insertion_point(field:nodeapi.Response.command)
    pub command: ::protobuf::EnumOrUnknown<KeepAliveCommand>,
    // @@protoc_insertion_point(field:nodeapi.Response.err)
    pub err: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:nodeapi.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ok",
            |m: &Response| { &m.ok },
            |m: &mut Response| { &mut m.ok },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "command",
            |m: &Response| { &m.command },
            |m: &mut Response| { &mut m.command },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "err",
            |m: &Response| { &m.err },
            |m: &mut Response| { &mut m.err },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ok = is.read_bool()?;
                },
                16 => {
                    self.command = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.err = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 1 + 1;
        }
        if self.command != ::protobuf::EnumOrUnknown::new(KeepAliveCommand::NONE) {
            my_size += ::protobuf::rt::int32_size(2, self.command.value());
        }
        if !self.err.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        if self.command != ::protobuf::EnumOrUnknown::new(KeepAliveCommand::NONE) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.command))?;
        }
        if !self.err.is_empty() {
            os.write_string(3, &self.err)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.ok = false;
        self.command = ::protobuf::EnumOrUnknown::new(KeepAliveCommand::NONE);
        self.err.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            ok: false,
            command: ::protobuf::EnumOrUnknown::from_i32(0),
            err: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:nodeapi.NodeType)
pub enum NodeType {
    // @@protoc_insertion_point(enum_value:nodeapi.NodeType.PROVIDER)
    PROVIDER = 0,
    // @@protoc_insertion_point(enum_value:nodeapi.NodeType.SERVER)
    SERVER = 1,
    // @@protoc_insertion_point(enum_value:nodeapi.NodeType.GATEWAY)
    GATEWAY = 2,
}

impl ::protobuf::Enum for NodeType {
    const NAME: &'static str = "NodeType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NodeType> {
        match value {
            0 => ::std::option::Option::Some(NodeType::PROVIDER),
            1 => ::std::option::Option::Some(NodeType::SERVER),
            2 => ::std::option::Option::Some(NodeType::GATEWAY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [NodeType] = &[
        NodeType::PROVIDER,
        NodeType::SERVER,
        NodeType::GATEWAY,
    ];
}

impl ::protobuf::EnumFull for NodeType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("NodeType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for NodeType {
    fn default() -> Self {
        NodeType::PROVIDER
    }
}

impl NodeType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<NodeType>("NodeType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:nodeapi.KeepAliveCommand)
pub enum KeepAliveCommand {
    // @@protoc_insertion_point(enum_value:nodeapi.KeepAliveCommand.NONE)
    NONE = 0,
    // @@protoc_insertion_point(enum_value:nodeapi.KeepAliveCommand.RECONNECT)
    RECONNECT = 1,
    // @@protoc_insertion_point(enum_value:nodeapi.KeepAliveCommand.SERVER_CHANGE)
    SERVER_CHANGE = 2,
    // @@protoc_insertion_point(enum_value:nodeapi.KeepAliveCommand.PROVIDER_DISCONNECT)
    PROVIDER_DISCONNECT = 3,
}

impl ::protobuf::Enum for KeepAliveCommand {
    const NAME: &'static str = "KeepAliveCommand";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<KeepAliveCommand> {
        match value {
            0 => ::std::option::Option::Some(KeepAliveCommand::NONE),
            1 => ::std::option::Option::Some(KeepAliveCommand::RECONNECT),
            2 => ::std::option::Option::Some(KeepAliveCommand::SERVER_CHANGE),
            3 => ::std::option::Option::Some(KeepAliveCommand::PROVIDER_DISCONNECT),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [KeepAliveCommand] = &[
        KeepAliveCommand::NONE,
        KeepAliveCommand::RECONNECT,
        KeepAliveCommand::SERVER_CHANGE,
        KeepAliveCommand::PROVIDER_DISCONNECT,
    ];
}

impl ::protobuf::EnumFull for KeepAliveCommand {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("KeepAliveCommand").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for KeepAliveCommand {
    fn default() -> Self {
        KeepAliveCommand::NONE
    }
}

impl KeepAliveCommand {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<KeepAliveCommand>("KeepAliveCommand")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rnodeapi.proto\x12\x07nodeapi\x1a\x1fgoogle/protobuf/timestamp.proto\
    \"\xdd\x03\n\x08NodeInfo\x12\x1b\n\tnode_name\x18\x01\x20\x01(\tR\x08nod\
    eName\x12.\n\tnode_type\x18\x02\x20\x01(\x0e2\x11.nodeapi.NodeTypeR\x08n\
    odeType\x12\x1f\n\x0bserver_info\x18\x03\x20\x01(\tR\nserverInfo\x12,\n\
    \x12node_pbase_version\x18\x04\x20\x01(\tR\x10nodePbaseVersion\x12\x20\n\
    \x0cwith_node_id\x18\x05\x20\x01(\x05R\nwithNodeId\x12\x1d\n\ncluster_id\
    \x18\x06\x20\x01(\x05R\tclusterId\x12\x17\n\x07area_id\x18\x07\x20\x01(\
    \tR\x06areaId\x12\"\n\x0cchannelTypes\x18\x08\x20\x03(\rR\x0cchannelType\
    s\x12\x17\n\x07gw_info\x18\t\x20\x01(\tR\x06gwInfo\x12\x1f\n\x0bbin_vers\
    ion\x18\n\x20\x01(\tR\nbinVersion\x12\x14\n\x05count\x18\x0b\x20\x01(\
    \x05R\x05count\x12B\n\x0flast_alive_time\x18\x0c\x20\x01(\x0b2\x1a.googl\
    e.protobuf.TimestampR\rlastAliveTime\x12#\n\rkeepalive_arg\x18\r\x20\x01\
    (\tR\x0ckeepaliveArg\"\x89\x01\n\x06NodeID\x12\x17\n\x07node_id\x18\x01\
    \x20\x01(\x05R\x06nodeId\x12\x16\n\x06secret\x18\x02\x20\x01(\x06R\x06se\
    cret\x12\x1f\n\x0bserver_info\x18\x03\x20\x01(\tR\nserverInfo\x12-\n\x12\
    keepalive_duration\x18\x04\x20\x01(\x05R\x11keepaliveDuration\"U\n\x0cSe\
    rverStatus\x12\x10\n\x03cpu\x18\x01\x20\x01(\x01R\x03cpu\x12\x16\n\x06me\
    mory\x18\x02\x20\x01(\x01R\x06memory\x12\x1b\n\tmsg_count\x18\x03\x20\
    \x01(\x04R\x08msgCount\"\xcb\x01\n\nNodeUpdate\x12\x17\n\x07node_id\x18\
    \x01\x20\x01(\x05R\x06nodeId\x12\x16\n\x06secret\x18\x02\x20\x01(\x06R\
    \x06secret\x12!\n\x0cupdate_count\x18\x03\x20\x01(\x05R\x0bupdateCount\
    \x12\x1f\n\x0bnode_status\x18\x04\x20\x01(\x05R\nnodeStatus\x12\x19\n\
    \x08node_arg\x18\x05\x20\x01(\tR\x07nodeArg\x12-\n\x06status\x18\x06\x20\
    \x01(\x0b2\x15.nodeapi.ServerStatusR\x06status\"a\n\x08Response\x12\x0e\
    \n\x02ok\x18\x01\x20\x01(\x08R\x02ok\x123\n\x07command\x18\x02\x20\x01(\
    \x0e2\x19.nodeapi.KeepAliveCommandR\x07command\x12\x10\n\x03err\x18\x03\
    \x20\x01(\tR\x03err*1\n\x08NodeType\x12\x0c\n\x08PROVIDER\x10\0\x12\n\n\
    \x06SERVER\x10\x01\x12\x0b\n\x07GATEWAY\x10\x02*W\n\x10KeepAliveCommand\
    \x12\x08\n\x04NONE\x10\0\x12\r\n\tRECONNECT\x10\x01\x12\x11\n\rSERVER_CH\
    ANGE\x10\x02\x12\x17\n\x13PROVIDER_DISCONNECT\x10\x032\xde\x01\n\x04Node\
    \x124\n\x0cRegisterNode\x12\x11.nodeapi.NodeInfo\x1a\x0f.nodeapi.NodeID\
    \"\0\x121\n\tQueryNode\x12\x0f.nodeapi.NodeID\x1a\x11.nodeapi.NodeInfo\"\
    \0\x125\n\tKeepAlive\x12\x13.nodeapi.NodeUpdate\x1a\x11.nodeapi.Response\
    \"\0\x126\n\x0eUnRegisterNode\x12\x0f.nodeapi.NodeID\x1a\x11.nodeapi.Res\
    ponse\"\0B$Z\"github.com/synerex/synerex_nodeapib\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(NodeInfo::generated_message_descriptor_data());
            messages.push(NodeID::generated_message_descriptor_data());
            messages.push(ServerStatus::generated_message_descriptor_data());
            messages.push(NodeUpdate::generated_message_descriptor_data());
            messages.push(Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(NodeType::generated_enum_descriptor_data());
            enums.push(KeepAliveCommand::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
